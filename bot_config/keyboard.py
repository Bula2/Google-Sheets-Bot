# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏
from aiogram import types
import bot_config.free_time
import bot_config.data
from aiogram.types.callback_query import CallbackQuery
import bot_config.inline_keyboard as inline
import bot_config.utils
from dataBase import main as db


def Buttoms(dp, bot):

    id_dict = {}

    @dp.message_handler(commands="start", state="*")# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞ /start
    async def start(message: types.Message):
        id_dict[message.from_user.id]=[]
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏ ‚úç : ", reply_markup=inline.type_of_rent)

    @dp.callback_query_handler(inline.cb.filter(item_name="–û—Ç–º–µ–Ω–∞"), state="*") # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    async def cancel(call: CallbackQuery):
        if len(id_dict[call.from_user.id])>0:
            del id_dict[call.from_user.id][-1]
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

    @dp.callback_query_handler(inline.cb.filter(count="type_of_rent"),state="*")  # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏ (–∞—Ä–µ–Ω–¥–∞/—Å–æ–ª—è–Ω–∫–∞)
    async def bask(call: CallbackQuery, callback_data: dict):
        id_dict[call.from_user.id].clear()
        id_dict[call.from_user.id].append(callback_data["item_name"])
        if callback_data["item_name"]=="–°–±–æ—Ä–Ω–∞—è –∏–≥—Ä–∞":
            if len(id_dict[call.from_user.id]) > 1:
                del id_dict[call.from_user.id][-1]
            id_dict[call.from_user.id].append("–ë–∞—Å–∫–µ—Ç–±–æ–ª")
            await call.answer(cache_time=60)
            await call.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏üóì: \n"
                                           "–ó–∞–ø–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –ë–∞—Å–∫–µ—Ç–±–æ–ª\n"
                                           "–≤ —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Å 18:00 –¥–æ 20:00", reply_markup=inline.Choose_Date_3())
        else:
            await call.answer(cache_time=60)
            await call.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞: ", reply_markup=inline.sport)

    @dp.callback_query_handler(inline.cb.filter(item_name="–ë–∞—Å–∫–µ—Ç–±–æ–ª"), state="*")# –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—Ä–µ–Ω–¥—ã –∑–∞–ª–∞ –¥–ª—è –±–∞—Å–∫–µ—Ç–±–æ–ª–∞
    async def bask(call: CallbackQuery, callback_data: dict):
        if len(id_dict[call.from_user.id]) > 1:
            del id_dict[call.from_user.id][-1]
        id_dict[call.from_user.id].append(callback_data["item_name"])
        await call.answer(cache_time=60)
        await call.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∞—Ä–µ–Ω–¥—ãüóì: ", reply_markup=inline.Choose_Date_1())

    @dp.callback_query_handler(inline.cb.filter(item_name="–§—É—Ç–±–æ–ª/–í–æ–ª–ª–µ–π–±–æ–ª"), state="*")# –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—Ä–µ–Ω–¥—ã –∑–∞–ª–∞ –¥–ª—è —Ñ—É—Ç–±–æ–ª–∞/–≤–æ–ª–ª–µ–π–±–æ–ª–∞
    async def foot(call: CallbackQuery,callback_data: dict):
        if len(id_dict[call.from_user.id]) > 1:
            del id_dict[call.from_user.id][-1]
        id_dict[call.from_user.id].append(callback_data["item_name"])
        await call.answer(cache_time=60)
        await call.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∞—Ä–µ–Ω–¥—ãüóì: ", reply_markup=inline.Choose_Date_0())


    @dp.callback_query_handler(text_contains="week1", state="*")# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ –¥–ª—è —Å–ø–æ—Ä—Ç–∞: –ë–∞—Å–∫–µ—Ç–±–æ–ª; –í—ã–±–æ—Ä –¥–Ω—è –∞—Ä–µ–Ω–¥—ã
    async def days1(call: CallbackQuery):
        if len(id_dict[call.from_user.id])>2:
            del id_dict[call.from_user.id][-1]
        id_dict[call.from_user.id].append(call.data[:-6])
        greed_status = bot_config.free_time.Date(call.data[:5], 1)
        if greed_status==False:
            del id_dict[call.from_user.id][-1]
            await call.answer(cache_time=60)
            await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞üò™, \n"
                                      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É", reply_markup=inline.Choose_Date_1())
        elif len(greed_status) > 0:
            await call.answer(cache_time=360)
            await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã‚è∞: ", reply_markup=inline.Time(greed_status, id_dict[call.from_user.id][2]))
        else:
            del id_dict[call.from_user.id][-1]
            await call.answer(cache_time=60)
            await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏üò™, \n"
                                      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å", reply_markup=inline.Choose_Date_1())

    @dp.callback_query_handler(text_contains="week0", state="*")  # –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ –¥–ª—è —Å–ø–æ—Ä—Ç–∞: –ë–∞—Å–∫–µ—Ç–±–æ–ª; –í—ã–±–æ—Ä –¥–Ω—è –∞—Ä–µ–Ω–¥—ã
    async def days1(call: CallbackQuery):
        if len(id_dict[call.from_user.id])>2:
            del id_dict[call.from_user.id][-1]
        id_dict[call.from_user.id].append(call.data[:-6])
        greed_status = bot_config.free_time.Date(call.data[:5], 1)
        if greed_status == False:
            del id_dict[call.from_user.id][-1]
            await call.answer(cache_time=60)
            await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞üò™, \n"
                                      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É", reply_markup=inline.Choose_Date_0())
        elif len(greed_status) > 0:
            await call.answer(cache_time=360)
            await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã‚è∞: ", reply_markup=inline.Time(greed_status, id_dict[call.from_user.id][2]))
        else:
            del id_dict[call.from_user.id][-1]
            await call.answer(cache_time=60)
            await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏üò™, \n"
                                      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å", reply_markup=inline.Choose_Date_0())

    @dp.callback_query_handler(text_contains="week3", state="*")  # –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ –¥–ª—è —Å–ø–æ—Ä—Ç–∞: –ë–∞—Å–∫–µ—Ç–±–æ–ª; –í—ã–±–æ—Ä –¥–Ω—è –∞—Ä–µ–Ω–¥—ã
    async def days1(call: CallbackQuery):
        if len(id_dict[call.from_user.id]) > 2:
            del id_dict[call.from_user.id][-1]
        id_dict[call.from_user.id].append(call.data[:5])
        id_dict[call.from_user.id].append("18:00")
        id_dict[call.from_user.id].append("2 hours")
        await call.answer(cache_time=60)
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à–µ –∏–º—è (—Å–æ–æ–±—â–µ–Ω–∏–µ–º): ")
        await bot_config.utils.Other.number.set()

    @dp.callback_query_handler(text_contains="!", state="*")# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∞—Ä–µ–Ω–¥—ã
    async def how_many_hours(call: CallbackQuery):
        if len(id_dict[call.from_user.id])>3:
            del id_dict[call.from_user.id][-1]
        id_dict[call.from_user.id].append(call.data[:-1])
        await call.answer(cache_time=60)
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã‚åõ: ", reply_markup=inline.how_many_hours)

    @dp.callback_query_handler(inline.cb.filter(count="end"), state="*")# –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã
    async def end(call: CallbackQuery, callback_data: dict):
        if len(id_dict[call.from_user.id])>4:
            del id_dict[call.from_user.id][-1]
        id_dict[call.from_user.id].append(callback_data["item_name"])
        await call.answer(cache_time=60)
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à–µ –∏–º—è (—Å–æ–æ–±—â–µ–Ω–∏–µ–º): ")
        await bot_config.utils.Other.number.set()


    @dp.callback_query_handler(text_contains="other", state="*")# –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã, –∑–∞–¥–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    async def other(call: CallbackQuery):
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ‚åõ: ")
        await bot_config.utils.Other.contact.set()

    @dp.message_handler(state=bot_config.utils.Other.contact)# –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async def contacts(message: types.Message):
        if len(id_dict[message.from_user.id])>4:
            del id_dict[message.from_user.id][-1]
        id_dict[message.from_user.id].append(message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à–µ –∏–º—è (—Å–æ–æ–±—â–µ–Ω–∏–µ–º): ")
        await bot_config.utils.Other.number.set()

    @dp.message_handler(state=bot_config.utils.Other.number)  # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async def contacts(message: types.Message):
        if len(id_dict[message.from_user.id]) > 5:
            del id_dict[message.from_user.id][-1]
        id_dict[message.from_user.id].append(message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å–æ–±—â–µ–Ω–∏–µ):")
        await bot_config.utils.Other.check.set()

    @dp.message_handler(state=bot_config.utils.Other.check) # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async def other_end(message: types.Message):
        if len(id_dict[message.from_user.id])>6:
            del id_dict[message.from_user.id][-1]
        id_dict[message.from_user.id].append(message.text)
        user_info_return = "; ".join(id_dict[message.from_user.id])
        await bot.send_message(chat_id=message.from_user.id, text=f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö: \n"
                             f"<b>{user_info_return}</b>.\n"
                             "–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ: <b>Ok</b> \n"
                             "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ: <b>–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä–µ–Ω–¥—ã</b>", reply_markup=inline.check_info)
        await bot_config.utils.Other.state_no.set()

    @dp.callback_query_handler(inline.cb.filter(item_name="check1"), state="*")  # –î–æ—Å–≤–∏–¥—É–ª–∏
    async def cancel(call: CallbackQuery):
        await call.answer(cache_time=60)
        user_info_return = "; ".join(id_dict[call.from_user.id])
        #await bot.send_message(645454958, user_info_return)
        id=call.from_user.id
        #db.data_processing(id, id_dict[call.from_user.id])
        id_dict[call.from_user.id].clear()
        await call.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É! \n"
                             "–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏üëç.")


    @dp.callback_query_handler(inline.cb.filter(item_name="check0"), state="*")  # –ß–µ–ª –æ—à–∏–±—Å—è, –≤—Å–µ –ø–æ –Ω–æ–≤–æ–π
    async def mistake(call: CallbackQuery):
        await call.answer(cache_time=60)
        await call.message.answer("–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É: /start \n"
                                  "–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –∞—Ä–µ–Ω–¥—É –∑–∞–Ω–æ–≤–æ.")


    dp.register_message_handler(start, commands="start")

